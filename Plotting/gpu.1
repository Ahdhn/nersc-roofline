import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import matplotlib.patches as mpatches
font = { 'size'   : 20}
plt.rc('font', **font)

filename = 'plot_' + sys.argv[0].split('.')[0]+'_'+sys.argv[0].split('.')[1]
scalingFactorForRoofs = 1

#smemroofs = [2996.77, 828.758]
smemroofs = [828.758]
#scomproofs = [7068.86, 3535.79, 496.56, 6894.67, 6894.07]
scomproofs = [7068.86, 3535.79]
#smem_roof_name = ['L2', 'HBM']
smem_roof_name = ['HBM']
#scomp_roof_name = ['FMA', 'No-FMA', 'Div FMA', 'Stride 2', 'Stride 4']
scomp_roof_name = ['FMA', 'No-FMA']

markersize = 16
AI = [ 2.584785579, 4.738878073, 6.892970567, 9.047063062, 11.08619259, 13.21154434]
FLOPS_fma = [ 2085.756683, 3593.593112, 4381.739349, 4625.535516, 4599.764097, 4692.209405]
FLOPS_nofma = [ 1989.805396, 3283.979842, 3444.997829, 3497.277426, 3558.521905, 3526.106508]
#2.638540139, 7.074264437, 13.41748724]
#2132.722222, 4764.353846, 5163.614035]
#2056.553571, 3871.0375, 3898.357616]
#labels = ['FMA, iw=1','FMA, iw=2','FMA, iw=3', 'FMA, iw=4','FMA, iw=5','FMA, iw=6', 'No FMA, iw=1','No FMA, iw=2','No FMA, iw=3', 'No FMA, iw=4','No FMA, iw=5','No FMA, iw=6']
#labels = ['FMA, nw=1','FMA, nw=2','FMA, nw=3', 'FMA, nw=4','FMA, nw=5','FMA, nw=6', 'No FMA, nw=1','No FMA, nw=2','No FMA, nw=3', 'No FMA, nw=4','No FMA, nw=5','No FMA, nw=6']
labels = ['nw=1','nw=2','nw=3', 'nw=4','nw=5','nw=6', 'nw=1','nw=2','nw=3', 'nw=4','nw=5','nw=6']


colors = ['b','g','r','y','m','c']
#colors = ['r','y','g','b',]
styles = ['o','s','v','^','D',">","<","*","h","H","+","1","2","3","4","8","p","d","|","_",".",","]

fig = plt.figure(1,figsize=(10.67,6.6))
plt.clf()
ax = fig.gca()
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('Arithmetic Intensity [FLOPs/Byte]')
ax.set_ylabel('Performance [GFLOP/sec]')
#ax.set_title('Original GPU Performance')

nx = 10000
xmin = 0.2
xmax = 2
ymin = 1000.0 / scalingFactorForRoofs
ymax = 10000/scalingFactorForRoofs

ax.set_xlim(10**xmin, 10**xmax)
ax.set_ylim(ymin, ymax)

ixx = int(nx*0.02)
xlim = ax.get_xlim()
ylim = ax.get_ylim()

scomp_x_elbow = [] 
scomp_ix_elbow = [] 
smem_x_elbow = [] 
smem_ix_elbow = [] 

x = np.logspace(xmin,xmax,nx)
for roof in scomproofs:
    for ix in range(1,nx):
        if smemroofs[0] * x[ix] >= roof and smemroofs[0] * x[ix-1] < roof:
            scomp_x_elbow.append(x[ix-1])
            scomp_ix_elbow.append(ix-1)
            break


for roof in smemroofs:
    for ix in range(1,nx):
        if (scomproofs[0] <= roof * x[ix] and scomproofs[0] > roof * x[ix-1]):
            smem_x_elbow.append(x[ix-1])
            smem_ix_elbow.append(ix-1)
            break        

for i in range(0,len(scomproofs)):
    roof = scomproofs[i]
    y = np.ones(len(x)) * roof / scalingFactorForRoofs
    ax.plot(x[scomp_ix_elbow[i]:],y[scomp_ix_elbow[i]:],c='k',ls='-',lw='2')

for i in range(0,len(smemroofs)):
    roof = smemroofs[i]
    y = x * roof / scalingFactorForRoofs
#    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c=colors[i],ls='-',lw='2')
    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c='k',ls='-',lw='2')


marker_handles = list()
for i in range(0,len(AI)):
#  ax.plot(float(AI[i]),float(FLOPS[i]),c=colors[i],marker=styles[i],linestyle='None',ms=markersize)
#  marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[2],marker=styles[i],linestyle='None',ms=markersize,label=labels[i]))
#  marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_nofma[i]),c=colors[2],marker=styles[i],linestyle='None',ms=markersize))
#  marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[i],marker=styles[i],linestyle='None',ms=markersize,label=labels[i])[0])
  ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[i],marker=styles[i],linestyle='None',ms=markersize,label=labels[i])
  marker_handles.append(ax.plot([],[],c=colors[i],marker=styles[i],linestyle='None',ms=markersize,label=labels[i])[0]) 

for i in range(0,len(AI)):
  ax.plot(float(AI[i]),float(FLOPS_nofma[i]),c=colors[i],marker=styles[i],linestyle='None',fillstyle='none',ms=markersize,label=labels[len(AI)+i])
#  marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_nofma[i]),c=colors[i],marker=styles[i],linestyle='None',fillstyle='none',ms=markersize,label=labels[len(AI)+i])[0])
#  marker_handles.append(ax.plot([],[],c = 'gray', marker=styles[i],linestyle='None',ms=markersize,label=labels[i])[0])

for roof in scomproofs:
    ax.text(x[-ixx],roof/scalingFactorForRoofs,
            scomp_roof_name[scomproofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GFLOP/s',
            horizontalalignment='right',
            verticalalignment='bottom')

for roof in smemroofs:
    ang = np.arctan(np.log10(xlim[1]/xlim[0]) / np.log10(ylim[1]/ylim[0]) 
                                 * fig.get_size_inches()[1]/fig.get_size_inches()[0] )
    ax.text(x[ixx],x[ixx]*roof/scalingFactorForRoofs*(1+0.25*np.sin(ang)**2),
            smem_roof_name[smemroofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GB/s',
            horizontalalignment='left',
            verticalalignment='bottom',
            rotation=180/np.pi*ang)


leg1 = plt.legend(handles = marker_handles,loc=4, ncol=2)
#'lower right',
#                      bbox_to_anchor = (0.81,0),scatterpoints = 1)
#leg1 = plt.legend(handles = marker_handles,loc='lower right',
#                      bbox_to_anchor = (0.81,0),scatterpoints = 1)

ax.add_artist(leg1)

patch_handles = list()
#for i in range(0,len(smemroofs)):
#    patch_handles.append(mpatches.Patch(color=colors[i],label = smem_roof_name[i]))
patch_handles.append(mpatches.Patch(color='gray',label = scomp_roof_name[0]))
patch_handles.append(mpatches.Patch(linewidth=2, edgecolor='gray',facecolor='none',label = scomp_roof_name[1]))

leg2 = plt.legend(handles = patch_handles,loc='lower right',bbox_to_anchor = (0.5,0),scatterpoints = 1)

ax.text(xlim[0]*1.1,ylim[1]/1.1,'V100',horizontalalignment='left',verticalalignment='top')


plt.savefig(filename+'.png')
plt.savefig(filename+'.eps')

#plt.show()


