import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import matplotlib.patches as mpatches
font = { 'size'   : 20}
plt.rc('font', **font)

filename = 'plot_' + sys.argv[0].split('.')[0]+'_'+sys.argv[0].split('.')[1]
scalingFactorForRoofs = 1

smemroofs = [828.758]
#scomproofs = [7068.86, 3535.79, 496.56, 6894.67, 6894.07]
scomproofs = [7068.86, 3535.79]
smem_roof_name = ['HBM']
#scomp_roof_name = ['FMA', 'No-FMA', 'Div FMA', 'Stride 2', 'Stride 4']
scomp_roof_name = ['FMA', 'No-FMA']

markersize = 16
#AI = [ 2.650197901, 7.079439466, 13.40770773, 1.28122775, 3.086951754, 6.105335214, 0.464742865, 1.21638936, 2.587617808, 0.381529604, 1.086271607, 2.343359873, 0.501808247, 1.424642095, 2.999898076, 0.597835341, 1.67490373, 3.299618834]
#FLOPS_fma = [2093.945455, 4764.353846, 5118.713043, 1056.577982, 2497.443548, 4528.092308, 500.726087, 1008.739414, 2125.097473, 329.0485714, 900.2412791, 1936.355263, 426.5444444, 1168.615094, 2473.327731, 442.95, 1200.321705, 2354.608]
#AI = [ 2.650197901, 7.079439466, 13.40770773, 1.28122775, 3.086951754, 6.105335214, 0.464742865, 1.21638936, 2.587617808, 0.493724397, 1.395272477, 2.880958927]
#FLOPS_fma = [2093.945455, 4764.353846, 5118.713043, 1056.577982, 2497.443548, 4528.092308, 500.726087, 1008.739414, 2125.097473, 399.5143386, 1089.726026, 2254.763665]

AI = [2.594727949, 7.066886953, 13.41460619, 1.244912718, 3.069766935, 6.067542119, 0.56644114, 1.216609179, 2.570526951, 0.397347772, 1.08276264, 2.343713221]
FLOPS_fma = [2066.142687, 4421.945592, 4640.167902, 1009.484157, 2472.242624, 4295.849753, 466.9759106, 1001.963918, 2105.071611, 328.9545844, 897.348374, 1940.40743]

#AI = [2.533980314, 6.864738836, 13.13976773, 1.177935685, 3.079777026, 5.557899728, 0.508459684, 1.204257783, 2.562221071, 0.398565084, 1.082948995, 2.341433828]
#FLOPS_fma = [1994.606784, 3503.086437, 3540.3362, 952.2262185, 2435.802042, 3469.064625, 413.3108435, 993.4397937, 2086.056261, 329.9016027, 897.4549944, 1935.074835]

#labels = ['Original, iw=1','Original, iw=3','Original, iw=6', 'Stride 2, iw=1','Stride 2, iw=3','Stride 2, iw=6', 'Stride 4, iw=1','Stride 4, iw=3','Stride 4, iw=6', 'Stride 8, iw=1','Stride 8, iw=3','Stride 8, iw=6', 'Stride 16, iw=1','Stride 16, iw=3','Stride 16, iw=6']
labels = ['Original','Original','Original', 'Stride 2','Stride 2','Stride 2', 'Stride 4','Stride 4','Stride 4', 'Stride 8','Stride 8','Stride 8', 'Stride 16','Stride 16','Stride 16']


colors = ['b','g','r','y','m','c']
#colors = ['r','y','g','b',]
styles = ['o','s','v','^','D',"<",">","*","h","H","+","1","2","3","4","8","p","d","|","_",".",","]

fig = plt.figure(1,figsize=(10.67,6.6))
plt.clf()
ax = fig.gca()
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('Arithmetic Intensity [FLOPs/Byte]')
ax.set_ylabel('Performance [GFLOP/sec]')
#ax.set_title('GPU Performance with Strides (Stride 1 = Original)')

nx = 10000
xmin = -0.5
xmax = 2.8
ymin = 100.0 / scalingFactorForRoofs
ymax = 10000/scalingFactorForRoofs

ax.set_xlim(10**xmin, 10**xmax)
ax.set_ylim(ymin, ymax)

ixx = int(nx*0.02)
xlim = ax.get_xlim()
ylim = ax.get_ylim()

scomp_x_elbow = [] 
scomp_ix_elbow = [] 
smem_x_elbow = [] 
smem_ix_elbow = [] 

x = np.logspace(xmin,xmax,nx)
for roof in scomproofs:
    for ix in range(1,nx):
        if smemroofs[0] * x[ix] >= roof and smemroofs[0] * x[ix-1] < roof:
            scomp_x_elbow.append(x[ix-1])
            scomp_ix_elbow.append(ix-1)
            break


for roof in smemroofs:
    for ix in range(1,nx):
        if (scomproofs[0] <= roof * x[ix] and scomproofs[0] > roof * x[ix-1]):
            smem_x_elbow.append(x[ix-1])
            smem_ix_elbow.append(ix-1)
            break        

for i in range(0,len(scomproofs)):
    roof = scomproofs[i]
    y = np.ones(len(x)) * roof / scalingFactorForRoofs
    ax.plot(x[scomp_ix_elbow[i]:],y[scomp_ix_elbow[i]:],c='k',ls='-',lw='2')

for i in range(0,len(smemroofs)):
    roof = smemroofs[i]
    y = x * roof / scalingFactorForRoofs
#    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c=colors[i],ls='-',lw='2')
    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c='k',ls='-',lw='2')


marker_handles = list()
for j in range(0,3):
  for k in range(0,len(AI)/3):
     i = k *3 + j
     #marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[j],marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0])
     ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[j],marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0]
     if j==0:
       marker_handles.append(ax.plot([],[],c = 'gray', marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0])


for roof in scomproofs:
    ax.text(x[-ixx],roof/scalingFactorForRoofs,
            scomp_roof_name[scomproofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GFLOP/s',
            horizontalalignment='right',
            verticalalignment='bottom')

for roof in smemroofs:
    ang = np.arctan(np.log10(xlim[1]/xlim[0]) / np.log10(ylim[1]/ylim[0]) 
                                 * fig.get_size_inches()[1]/fig.get_size_inches()[0] )
#    ax.text(x[ixx],x[ixx]*roof/scalingFactorForRoofs*(1+0.45*np.sin(ang)**2),
#            smem_roof_name[smemroofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GB/s',
#            horizontalalignment='left',
#            verticalalignment='bottom',
#            rotation=180/np.pi*ang)
    ax.text(x[smem_ix_elbow[0]]*0.6,0.6*x[smem_ix_elbow[0]]*roof/scalingFactorForRoofs*(1+0.45*np.sin(ang)**2),
            smem_roof_name[smemroofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GB/s',
            horizontalalignment='right',
            verticalalignment='top',
            rotation=180/np.pi*ang)


leg1 = plt.legend(handles = marker_handles,loc=4, ncol=1)
ax.add_artist(leg1)

patch_handles = list()
labels_iw=['nw=1','nw=3','nw=6']
for i in range(0,3):
    patch_handles.append(mpatches.Patch(color=colors[i],label = labels_iw[i]))

leg2 = plt.legend(handles = patch_handles,loc='lower right',bbox_to_anchor = (0.73,0),scatterpoints = 1)

ax.text(xlim[0]*1.1,ylim[1]/1.1,'V100',horizontalalignment='left',verticalalignment='top')

plt.savefig(filename+'.png')
plt.savefig(filename+'.eps')

#plt.show()


