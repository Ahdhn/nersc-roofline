import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import matplotlib.patches as mpatches
font = { 'size'   : 20}
plt.rc('font', **font)

filename = 'plot_' + sys.argv[0].split('.')[0]+'_'+sys.argv[0].split('.')[1]
scalingFactorForRoofs = 1

smemroofs = [341.14]
scomproofs = [2390.12, 959.49]
smem_roof_name = ['HBM']
scomp_roof_name = ['FMA', 'No-FMA']

markersize = 16
AI = [1.248987978, 3.327420962, 7.72739077, 0.619851048, 1.373516613, 2.748276887, 0.28531469, 0.677273181, 1.245330102, 0.178309003, 0.439271772, 0.810285428, 0.133596037, 0.306672831, 0.5727008]
FLOPS_fma = [371.8108326, 735.1113515, 917.9114175, 181.7726811, 442.3001544, 705.3553334, 91.58609095, 225.4707406, 417.9572346, 57.5444615, 145.5542113, 274.1829048, 43.23374161, 102.2963156, 191.4400273]
#AI = [1.2674479, 3.181821697, 7.576526284, 0.566559743, 1.370559017, 2.827353767, 0.275627855, 0.665408233, 1.222301815, 0.175236984, 0.434429386, 0.789221061, 0.134997206, 0.307253942, 0.597971399]
#FLOPS_fma = [340.9042224, 612.1941542, 739.0734799, 176.8940188, 408.7632433, 600.3124073, 87.65242875, 220.351548, 391.0267764, 56.1689657, 143.0129868, 256.6912449, 41.87952875, 98.4209767, 182.2300168]


#AI = [1.314615691, 3.529548662, 6.851948742, 0.548995278, 1.473971109, 2.861435117, 0.255749545, 0.686649697, 1.333000045, 0.165264155, 0.44370981, 0.86137837, 0.122034346, 0.327644168, 0.636058958]
##AI = [1.23744496, 3.322356665, 6.44972481, 0.55595166, 1.492647966, 2.897692688, 0.257255835, 0.690693862, 1.340851024, 0.172266602, 0.462510344, 0.897876039, 0.122518357, 0.328943666, 0.638581686]
#AI = [1.332630258, 3.019552148, 6.64135876, 0.602074136, 1.363419695, 2.951337627, 0.286426604, 0.673376327, 1.245997805, 0.19426183, 0.445961035, 0.834367853, 0.136290102, 0.312546931, 0.608993373]
#
#FLOPS_fma = [365.3996309, 701.4855562, 885.3906511, 185.3217448, 435.9904968, 691.1661341, 90.29752069, 219.9808776, 420.4745029, 57.30492535, 146.1003765, 268.9334315, 43.64716145, 100.8773285, 189.5863695]

#AI = [0.899168956, 2.555253877, 5.006564099, 0.449584478, 1.277626938, 2.503282049, 0.224792239, 0.638813469, 1.251641025, 0.112396119, 0.319406735, 0.625820512, 0.05619806, 0.159703367, 0.312910256]
#FLOPS_fma = [358.9172414, 718.8110236, 779.4699854, 176.4169492, 399.8058394, 631.5278766, 83.7377313, 219.973494, 405.7759146, 53.81902792, 128.8785882, 247.1578459, 41.85774762, 92.78596271, 172.123937]
#labels = ['Original, iw=1','Original, iw=3','Original, iw=6', 'Stride 2, iw=1','Stride 2, iw=3','Stride 2, iw=6', 'Stride 4, iw=1','Stride 4, iw=3','Stride 4, iw=6', 'Stride 8, iw=1','Stride 8, iw=3','Stride 8, iw=6', 'Stride 16, iw=1','Stride 16, iw=3','Stride 16, iw=6']
labels = ['Original','Original','Original', 'Stride 2','Stride 2','Stride 2', 'Stride 4','Stride 4','Stride 4', 'Stride 8','Stride 8','Stride 8', 'Stride 16','Stride 16','Stride 16']

colors = ['b','g','r','y','m','c']
#colors = ['r','y','g','b',]
styles = ['o','s','v','^','D',"<",">","*","h","H","+","1","2","3","4","8","p","d","|","_",".",","]

fig = plt.figure(1,figsize=(10.67,6.6))
plt.clf()
ax = fig.gca()
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('Arithmetic Intensity [FLOPs/Byte]')
ax.set_ylabel('Performance [GFLOP/sec]')
#ax.set_title('CPU Performance with Strides (Stride 1 = Original)')

nx = 10000
xmin = -1
xmax = 2.8
ymin = 20.0 / scalingFactorForRoofs
ymax = 4000/scalingFactorForRoofs

ax.set_xlim(10**xmin, 10**xmax)
ax.set_ylim(ymin, ymax)

ixx = int(nx*0.02)
xlim = ax.get_xlim()
ylim = ax.get_ylim()

scomp_x_elbow = [] 
scomp_ix_elbow = [] 
smem_x_elbow = [] 
smem_ix_elbow = [] 

x = np.logspace(xmin,xmax,nx)
for roof in scomproofs:
    for ix in range(1,nx):
        if smemroofs[0] * x[ix] >= roof and smemroofs[0] * x[ix-1] < roof:
            scomp_x_elbow.append(x[ix-1])
            scomp_ix_elbow.append(ix-1)
            break


for roof in smemroofs:
    for ix in range(1,nx):
        if (scomproofs[0] <= roof * x[ix] and scomproofs[0] > roof * x[ix-1]):
            smem_x_elbow.append(x[ix-1])
            smem_ix_elbow.append(ix-1)
            break        

for i in range(0,len(scomproofs)):
    roof = scomproofs[i]
    y = np.ones(len(x)) * roof / scalingFactorForRoofs
    ax.plot(x[scomp_ix_elbow[i]:],y[scomp_ix_elbow[i]:],c='k',ls='-',lw='2')

for i in range(0,len(smemroofs)):
    roof = smemroofs[i]
    y = x * roof / scalingFactorForRoofs
#    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c=colors[i],ls='-',lw='2')
    ax.plot(x[:smem_ix_elbow[i]+1],y[:smem_ix_elbow[i]+1],c='k',ls='-',lw='2')


marker_handles = list()
for j in range(0,3):
  for k in range(0,len(AI)/3):
     i = k *3 + j
     #marker_handles.append(ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[j],marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0])
     ax.plot(float(AI[i]),float(FLOPS_fma[i]),c=colors[j],marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0]
     if j==0:
       marker_handles.append(ax.plot([],[],c = 'gray', marker=styles[k],linestyle='None',ms=markersize,label=labels[i])[0])


for roof in scomproofs:
    ax.text(x[-ixx],roof/scalingFactorForRoofs,
            scomp_roof_name[scomproofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GFLOP/s',
            horizontalalignment='right',
            verticalalignment='bottom')

ixx_ix_elbow=list()
for roof in smemroofs:
    ixx_ix_elbow.append(0)
    for ix in range(1,nx):
        if (ylim[0] <= roof * x[ix] and ylim[0] > roof * x[ix-1]):
            ixx_ix_elbow[-1]=ix-1 -ixx
            break

for i in range(0,len(smemroofs)):
    roof = smemroofs[i]
    ang = np.arctan(np.log10(xlim[1]/xlim[0]) / np.log10(ylim[1]/ylim[0])
                                 * fig.get_size_inches()[1]/fig.get_size_inches()[0] )
#    ax.text(x[ixx+ixx_ix_elbow[i]],x[ixx+ixx_ix_elbow[i]]*roof/scalingFactorForRoofs*(1+0.4*np.sin(ang)**2),
#            smem_roof_name[smemroofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GB/s',
#            horizontalalignment='left',
#            verticalalignment='bottom',
#            rotation=180/np.pi*ang)
    ax.text(x[smem_ix_elbow[0]]*0.6,0.6*x[smem_ix_elbow[0]]*roof/scalingFactorForRoofs*(1+0.5*np.sin(ang)**2),
            smem_roof_name[smemroofs.index(roof)] + ': ' + '{0:.1f}'.format(float(roof)/scalingFactorForRoofs) + ' GB/s',
            horizontalalignment='right',
            verticalalignment='top',
            rotation=180/np.pi*ang)


leg1 = plt.legend(handles = marker_handles,loc=4, ncol=1)
#'lower right',
#                      bbox_to_anchor = (0.81,0),scatterpoints = 1)
#leg1 = plt.legend(handles = marker_handles,loc='lower right',
#                      bbox_to_anchor = (0.81,0),scatterpoints = 1)

ax.add_artist(leg1)

patch_handles = list()
labels_iw=['nw=1','nw=3','nw=6']
for i in range(0,3):
    patch_handles.append(mpatches.Patch(color=colors[i],label = labels_iw[i]))

leg2 = plt.legend(handles = patch_handles,loc='lower right',bbox_to_anchor = (0.7,0),scatterpoints = 1)

ax.text(xlim[0]*1.15,ylim[1]/1.1,'KNL',horizontalalignment='left',verticalalignment='top')

plt.savefig(filename+'.png')
plt.savefig(filename+'.eps')

#plt.show()


